plugins {
    id 'java-library'
    id 'idea'
    id 'checkstyle'
    id 'jacoco'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

version = '1.0.0'

repositories {
    mavenCentral()

    // Max8 libs
    flatDir {
        dirs './max8-libs'
    }
}

dependencies {
    implementation name: 'max'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: property('ch.qos.logback')
    implementation group: 'org.java-websocket', name: 'Java-WebSocket', version: property('org.java-websocket')

    // test
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: property('org.junit.jupiter')
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: property('org.junit.jupiter')
}

task customFatJar(type: Jar) {
    archiveFileName = 'max8-ui12.jar'
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    // exclude max8
    exclude 'com/cycling74/**'
    with jar
}

test {
    useJUnitPlatform()
    maxHeapSize = '1G'

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }

    finalizedBy jacocoTestReport // report is always generated after tests run
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}